// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(coveFFI)
    import coveFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_cove_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_cove_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol DatabaseProtocol: AnyObject {
    func getBoolConfig(key: GlobalBoolConfigKey) throws -> Bool
}

open class Database:
    DatabaseProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_database(self.pointer, $0) }
    }

    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_cove_fn_constructor_database_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_database(pointer, $0) }
    }

    open func getBoolConfig(key: GlobalBoolConfigKey) throws -> Bool {
        return try FfiConverterBool.lift(rustCallWithError(FfiConverterTypeError.lift) {
            uniffi_cove_fn_method_database_get_bool_config(self.uniffiClonePointer(),
                                                           FfiConverterTypeGlobalBoolConfigKey.lower(key), $0)
        })
    }
}

public struct FfiConverterTypeDatabase: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Database

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Database {
        return Database(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Database) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Database {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Database, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeDatabase_lift(_ pointer: UnsafeMutableRawPointer) throws -> Database {
    return try FfiConverterTypeDatabase.lift(pointer)
}

public func FfiConverterTypeDatabase_lower(_ value: Database) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDatabase.lower(value)
}

/**
 * Representation of our app over FFI. Essentially a wrapper of [`App`].
 */
public protocol FfiAppProtocol: AnyObject {
    /**
     * Frontend calls this method to send events to the rust application logic
     */
    func dispatch(event: Event)

    func getState() -> AppState

    func listenForUpdates(updater: FfiUpdater)
}

/**
 * Representation of our app over FFI. Essentially a wrapper of [`App`].
 */
open class FfiApp:
    FfiAppProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_cove_fn_clone_ffiapp(self.pointer, $0) }
    }

    /**
     * FFI constructor which wraps in an Arc
     */
    public convenience init() {
        let pointer =
            try! rustCall {
                uniffi_cove_fn_constructor_ffiapp_new($0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_cove_fn_free_ffiapp(pointer, $0) }
    }

    /**
     * Frontend calls this method to send events to the rust application logic
     */
    open func dispatch(event: Event) { try! rustCall {
        uniffi_cove_fn_method_ffiapp_dispatch(self.uniffiClonePointer(),
                                              FfiConverterTypeEvent.lower(event), $0)
    }
    }

    open func getState() -> AppState {
        return try! FfiConverterTypeAppState.lift(try! rustCall {
            uniffi_cove_fn_method_ffiapp_get_state(self.uniffiClonePointer(), $0)
        })
    }

    open func listenForUpdates(updater: FfiUpdater) { try! rustCall {
        uniffi_cove_fn_method_ffiapp_listen_for_updates(self.uniffiClonePointer(),
                                                        FfiConverterCallbackInterfaceFfiUpdater.lower(updater), $0)
    }
    }
}

public struct FfiConverterTypeFfiApp: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = FfiApp

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiApp {
        return FfiApp(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: FfiApp) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiApp {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: FfiApp, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeFfiApp_lift(_ pointer: UnsafeMutableRawPointer) throws -> FfiApp {
    return try FfiConverterTypeFfiApp.lift(pointer)
}

public func FfiConverterTypeFfiApp_lower(_ value: FfiApp) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFfiApp.lower(value)
}

public struct AppState {
    public var router: Router

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(router: Router) {
        self.router = router
    }
}

extension AppState: Equatable, Hashable {
    public static func == (lhs: AppState, rhs: AppState) -> Bool {
        if lhs.router != rhs.router {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(router)
    }
}

public struct FfiConverterTypeAppState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AppState {
        return
            try AppState(
                router: FfiConverterTypeRouter.read(from: &buf)
            )
    }

    public static func write(_ value: AppState, into buf: inout [UInt8]) {
        FfiConverterTypeRouter.write(value.router, into: &buf)
    }
}

public func FfiConverterTypeAppState_lift(_ buf: RustBuffer) throws -> AppState {
    return try FfiConverterTypeAppState.lift(buf)
}

public func FfiConverterTypeAppState_lower(_ value: AppState) -> RustBuffer {
    return FfiConverterTypeAppState.lower(value)
}

public struct Router {
    public var route: Route

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(route: Route) {
        self.route = route
    }
}

extension Router: Equatable, Hashable {
    public static func == (lhs: Router, rhs: Router) -> Bool {
        if lhs.route != rhs.route {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(route)
    }
}

public struct FfiConverterTypeRouter: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Router {
        return
            try Router(
                route: FfiConverterTypeRoute.read(from: &buf)
            )
    }

    public static func write(_ value: Router, into buf: inout [UInt8]) {
        FfiConverterTypeRoute.write(value.route, into: &buf)
    }
}

public func FfiConverterTypeRouter_lift(_ buf: RustBuffer) throws -> Router {
    return try FfiConverterTypeRouter.lift(buf)
}

public func FfiConverterTypeRouter_lower(_ value: Router) -> RustBuffer {
    return FfiConverterTypeRouter.lower(value)
}

public enum Error {
    case DatabaseAccessError(String
    )
    case TableAccessError(String
    )
    case ConfigReadError(String
    )
}

public struct FfiConverterTypeError: FfiConverterRustBuffer {
    typealias SwiftType = Error

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Error {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .DatabaseAccessError(
                FfiConverterString.read(from: &buf)
            )
        case 2: return try .TableAccessError(
                FfiConverterString.read(from: &buf)
            )
        case 3: return try .ConfigReadError(
                FfiConverterString.read(from: &buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Error, into buf: inout [UInt8]) {
        switch value {
        case let .DatabaseAccessError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)

        case let .TableAccessError(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)

        case let .ConfigReadError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
        }
    }
}

extension Error: Equatable, Hashable {}

extension Error: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Event {
    case setRoute(route: Route
    )
}

public struct FfiConverterTypeEvent: FfiConverterRustBuffer {
    typealias SwiftType = Event

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Event {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .setRoute(route: FfiConverterTypeRoute.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Event, into buf: inout [UInt8]) {
        switch value {
        case let .setRoute(route):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRoute.write(route, into: &buf)
        }
    }
}

public func FfiConverterTypeEvent_lift(_ buf: RustBuffer) throws -> Event {
    return try FfiConverterTypeEvent.lift(buf)
}

public func FfiConverterTypeEvent_lower(_ value: Event) -> RustBuffer {
    return FfiConverterTypeEvent.lower(value)
}

extension Event: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum GlobalBoolConfigKey {
    case firstTimeLaunch
}

public struct FfiConverterTypeGlobalBoolConfigKey: FfiConverterRustBuffer {
    typealias SwiftType = GlobalBoolConfigKey

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GlobalBoolConfigKey {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .firstTimeLaunch

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GlobalBoolConfigKey, into buf: inout [UInt8]) {
        switch value {
        case .firstTimeLaunch:
            writeInt(&buf, Int32(1))
        }
    }
}

public func FfiConverterTypeGlobalBoolConfigKey_lift(_ buf: RustBuffer) throws -> GlobalBoolConfigKey {
    return try FfiConverterTypeGlobalBoolConfigKey.lift(buf)
}

public func FfiConverterTypeGlobalBoolConfigKey_lower(_ value: GlobalBoolConfigKey) -> RustBuffer {
    return FfiConverterTypeGlobalBoolConfigKey.lower(value)
}

extension GlobalBoolConfigKey: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Route {
    case cove
}

public struct FfiConverterTypeRoute: FfiConverterRustBuffer {
    typealias SwiftType = Route

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Route {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .cove

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Route, into buf: inout [UInt8]) {
        switch value {
        case .cove:
            writeInt(&buf, Int32(1))
        }
    }
}

public func FfiConverterTypeRoute_lift(_ buf: RustBuffer) throws -> Route {
    return try FfiConverterTypeRoute.lift(buf)
}

public func FfiConverterTypeRoute_lower(_ value: Route) -> RustBuffer {
    return FfiConverterTypeRoute.lower(value)
}

extension Route: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Update {
    case routerUpdate(router: Router
    )
}

public struct FfiConverterTypeUpdate: FfiConverterRustBuffer {
    typealias SwiftType = Update

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Update {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .routerUpdate(router: FfiConverterTypeRouter.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Update, into buf: inout [UInt8]) {
        switch value {
        case let .routerUpdate(router):
            writeInt(&buf, Int32(1))
            FfiConverterTypeRouter.write(router, into: &buf)
        }
    }
}

public func FfiConverterTypeUpdate_lift(_ buf: RustBuffer) throws -> Update {
    return try FfiConverterTypeUpdate.lift(buf)
}

public func FfiConverterTypeUpdate_lower(_ value: Update) -> RustBuffer {
    return FfiConverterTypeUpdate.lower(value)
}

extension Update: Equatable, Hashable {}

public protocol FfiUpdater: AnyObject {
    /**
     * Essentially a callback to the frontend
     */
    func update(update: Update)
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceFfiUpdater {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceFfiUpdater = .init(
        update: { (
            uniffiHandle: UInt64,
            update: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceFfiUpdater.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.update(
                    update: FfiConverterTypeUpdate.lift(update)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceFfiUpdater.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface FfiUpdater: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitFfiUpdater() {
    uniffi_cove_fn_init_callback_vtable_ffiupdater(&UniffiCallbackInterfaceFfiUpdater.vtable)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceFfiUpdater {
    fileprivate static var handleMap = UniffiHandleMap<FfiUpdater>()
}

extension FfiConverterCallbackInterfaceFfiUpdater: FfiConverter {
    typealias SwiftType = FfiUpdater
    typealias FfiType = UInt64

    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public func global() { try! rustCall {
    uniffi_cove_fn_func_global($0
    )
}
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_cove_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_cove_checksum_func_global() != 52066 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_cove_checksum_method_database_get_bool_config() != 51514 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_cove_checksum_method_ffiapp_dispatch() != 2014 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_cove_checksum_method_ffiapp_get_state() != 15088 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_cove_checksum_method_ffiapp_listen_for_updates() != 45338 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_cove_checksum_constructor_database_new() != 41458 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_cove_checksum_constructor_ffiapp_new() != 11955 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_cove_checksum_method_ffiupdater_update() != 21755 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitFfiUpdater()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
